name: Foodgram-workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python

      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
#        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r backend/requirements.txt

    - name: Test with flake8
      run: |
        flake8
        cd backend/

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        # Проверка доступности репозитория Docker Hub для workflow
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        # Вызов сборщика контейнеров docker
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        # Запуск скрипта авторизации на Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push backend to Docker Hub
        # Пуш образа backend в Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: backend
          push: true
          tags: nikolay2310/foodgram_backend-1:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
    - name: executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SERVER_PASSPHRASE }}
        script: |
          cd infra/
          # Выполняет pull образа с DockerHub:
          sudo docker pull nikolay2310/foodgram_backend-1:latest
          #остановка всех контейнеров:
          sudo docker-compose stop
          #удаляем backend(web) контейнер с сервера:
          sudo docker-compose rm backend
          # запускаем сборку новых контейнеров
          sudo docker-compose up -d
